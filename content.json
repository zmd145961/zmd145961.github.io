{"meta":{"title":"Z‘s Blog","subtitle":"正准备找工作的准程序员emmmmm","description":"很快乐的编程生活","author":"ZhengMingdi","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-07-15T12:14:09.000Z","updated":"2019-07-15T12:14:09.715Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-15T12:12:23.000Z","updated":"2019-07-15T12:12:23.162Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"markdown基本语法","slug":"markdown基本语法","date":"2019-07-20T00:42:38.000Z","updated":"2019-07-20T00:50:38.634Z","comments":true,"path":"2019/07/20/markdown基本语法/","link":"","permalink":"http://yoursite.com/2019/07/20/markdown基本语法/","excerpt":"","text":"Markdown 简洁语法说明0.前言一直以来都是以word文档做笔记，存在很多问题，比如代码格式、高亮等。这次公司要求使用markdown，感觉眼前一亮，以前word的问题都得到了解决，而且可以生成电子书，或者直接通过gitbook放到网络中，非常棒。 1、基本语法1.1 多级标题语法在Markdown中，如果想将一段文字定义为标题，只需要在这段文字前面加上 #，再在 # 后加一个空格即可。还可增加二、三、四、五、六级标题，总共六级。每多一级 ，增加一个 # ，标题字号相应降低一级。如图： 快捷键在typora中，1级标题对应的快捷键是：CTRL + 1 ，其它级别分别对应2~6的数字即可 1.2 列表语法说明列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 - 就可以了；如果你希望是有序列表，在文字前面加上 1. 或2. 或3. 即可。 注意：无论是- 还是 1.都需要在后面跟上一个空格 快捷键typora中并没有对应快捷键，不过在菜单中有对应选项： 1.3 引用语法说明如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。 在引用文字前加上 &gt; 并与文字保留一个字符的空格即可。如图： 快捷键typora中的快捷键是：CTRL+SHIFT+Q 1.4 粗体和斜体语法说明Markdown 的粗体和斜体也非常简单： 用两个 * 包含一段文本就是粗体的语法； 用一个 * 包含一段文本就是斜体的语法。 如图： 快捷键typora中的快捷键： ​ 粗体：Ctrl + B ​ 斜体：Ctrl + I ​ 下划线：Ctrl + U 1.5 链接语法说明在 Markdown 中，插入链接的语法如下： 1[链接文本](链接地址) 快捷键typora中的快捷键是：Ctrl + K 1.6 图片语法说明在 Markdown 中，插入图片的语法如下： 1![图片说明文字](链接地址) 快捷键typora中的快捷键是：Ctrl + Shift + I 1.7 分割线分割线的语法只需要另起一行，连续输入三个星号 *** 即可分割两段文字内容。 1.8 表格表格输入相对复杂，推荐使用工具自带功能实现 语法说明 快捷键typora的快捷键：Ctrl + T 弹出菜单： 生成的表格： 1.9 代码高亮语法说明行内代码块： 1`代码` 段落代码块： 123```语言类型代码``` 示例： 快捷键行内代码： 1Ctrl + Shift + `","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"}]},{"title":"关于git的一些常用命令","slug":"关于git的一些常用命令","date":"2019-07-20T00:04:10.000Z","updated":"2019-07-20T01:03:50.723Z","comments":true,"path":"2019/07/20/关于git的一些常用命令/","link":"","permalink":"http://yoursite.com/2019/07/20/关于git的一些常用命令/","excerpt":"","text":"Git命令大全git config配置 Git 的相关参数。 Git 一共有3个配置文件： 仓库级的配置文件：在仓库的 .git/.gitconfig，该配置文件只对所在的仓库有效。 全局配置文件：Mac 系统在 ~/.gitconfig，Windows 系统在 C:\\Users\\&lt;用户名&gt;\\.gitconfig。 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 /usr/local/git）的 etc 文件夹中的 gitconfig。123456789101112131415161718192021222324252627282930313233343536373839404142# 查看配置信息# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -l# 查看当前生效的配置信息$ git config -l# 编辑配置文件# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -e# 添加配置项# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;# 获取配置项$ git config &lt;--local | --global | --system&gt; --get &lt;name&gt;# 删除配置项$ git config &lt;--local | --global | --system&gt; --unset &lt;name&gt;# 配置提交记录中的用户信息$ git config --global user.name &lt;用户名&gt;$ git config --global user.email &lt;邮箱地址&gt;# 更改Git缓存区的大小# 如果提交的内容较大，默认缓存较小，提交会失败# 缓存大小单位：B，例如：524288000（500MB）$ git config --global http.postBuffer &lt;缓存大小&gt;# 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态$ git config --global color.ui true# 配置可以缓存密码，默认缓存时间15分钟$ git config --global credential.helper cache# 配置密码的缓存时间# 缓存时间单位：秒$ git config --global credential.helper &apos;cache --timeout=&lt;缓存时间&gt;&apos;# 配置长期存储密码$ git config --global credential.helper store git clone从远程仓库克隆一个版本库到本地。 12345678# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下$ git clone &lt;远程仓库的网址&gt;# 指定本地仓库的目录$ git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;# -b 指定要克隆的分支，默认是master分支$ git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt; git init初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。 12# 初始化本地仓库，在当前目录下生成 .git 文件夹$ git init git status查看本地仓库的状态。 1234567# 查看本地仓库的状态$ git status# 以简短模式查看本地仓库的状态# 会显示两列，第一列是文件的状态，第二列是对应的文件# 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中$ git status -s git remote操作远程库。 123456789101112131415161718# 列出已经存在的远程仓库$ git remote# 列出远程仓库的详细信息，在别名后面列出URL地址$ git remote -v$ git remote --verbose# 添加远程仓库$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;# 修改远程仓库的别名$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;# 删除指定名称的远程仓库$ git remote remove &lt;远程仓库的别名&gt;# 修改远程仓库的 URL 地址$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt; git branch操作 Git 的分支命令。 1234567891011121314151617181920# 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出$ git branch# 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出$ git branch -v# 创建新分支，新的分支基于上一次提交建立$ git branch &lt;分支名&gt;# 修改分支名称# 如果不指定原分支名称则为当前所在分支$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 强制修改分支名称$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 删除指定的本地分支$ git branch -d &lt;分支名称&gt;# 强制删除指定的本地分支$ git branch -D &lt;分支名称&gt; git checkout检出命令，用于创建、切换分支等。 123456789101112# 切换到已存在的指定分支$ git checkout &lt;分支名称&gt;# 创建并切换到指定的分支，保留所有的提交记录# 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并$ git checkout -b &lt;分支名称&gt;# 创建并切换到指定的分支，删除所有的提交记录$ git checkout --orphan &lt;分支名称&gt;# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响$ git checkout &lt;文件路径&gt; git cherry-pick把已经提交的记录合并到当前分支。 12# 把已经提交的记录合并到当前分支$ git cherry-pick &lt;commit ID&gt; git add把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。 1234567891011121314# 把指定的文件添加到暂存区中$ git add &lt;文件路径&gt;# 添加所有修改、已删除的文件到暂存区中$ git add -u [&lt;文件路径&gt;]$ git add --update [&lt;文件路径&gt;]# 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录$ git add -A [&lt;文件路径&gt;]$ git add --all [&lt;文件路径&gt;]# 查看所有修改、已删除但没有提交的文件，进入一个子命令系统$ git add -i [&lt;文件路径&gt;]$ git add --interactive [&lt;文件路径&gt;] git commit将暂存区中的文件提交到本地仓库中。 123456789101112# 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息$ git commit# 把暂存区中的文件提交到本地仓库中并添加描述信息$ git commit -m &quot;&lt;提交的描述信息&gt;&quot;# 把所有修改、已删除的文件提交到本地仓库中# 不包括未被版本库跟踪的文件，等同于先调用了 &quot;git add -u&quot;$ git commit -a -m &quot;&lt;提交的描述信息&gt;&quot;# 修改上次提交的描述信息$ git commit --amend git fetch从远程仓库获取最新的版本到本地的 tmp 分支上。 12345# 将远程仓库所有分支的最新版本全部取回到本地$ git fetch &lt;远程仓库的别名&gt;# 将远程仓库指定分支的最新版本取回到本地$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; git merge合并分支。 12# 把指定的分支合并到当前所在的分支下$ git merge &lt;分支名称&gt; git diff比较版本之间的差异。 123456789101112131415161718# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改$ git diff# 比较暂存区中的文件和上次提交时的差异$ git diff --cached$ git diff --staged# 比较当前文件和上次提交时的差异$ git diff HEAD# 查看从指定的版本之后改动的内容$ git diff &lt;commit ID&gt;# 比较两个分支之间的差异$ git diff &lt;分支名称&gt; &lt;分支名称&gt;# 查看两个分支分开后各自的改动内容$ git diff &lt;分支名称&gt;...&lt;分支名称&gt; git pull从远程仓库获取最新版本并合并到本地。 首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。 12# 从远程仓库获取最新版本。$ git pull git push把本地仓库的提交推送到远程仓库。 123456# 把本地仓库的分支推送到远程仓库的指定分支$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 删除指定的远程仓库的分支$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt; git log显示提交的记录。 12345678# 打印所有的提交记录$ git log# 打印从第一次提交到指定的提交的记录$ git log &lt;commit ID&gt;# 打印指定数量的最新提交的记录$ git log -&lt;指定的数量&gt; git reset还原提交记录。 12345678910111213141516# 重置暂存区，但文件不受影响# 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件# 没有指定 commit ID 则默认为当前 HEAD$ git reset [&lt;文件路径&gt;]$ git reset --mixed [&lt;文件路径&gt;]# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改$ git reset &lt;commit ID&gt;$ git reset --mixed &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改# 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;$ git reset --soft &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了$ git reset --hard &lt;commit ID&gt; git revert生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。 12# 生成一个新的提交来撤销某次提交$ git revert &lt;commit ID&gt; git tag操作标签的命令。 1234567891011121314151617181920212223# 打印所有的标签$ git tag# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]# 添加带有描述信息的附注标签，可以指定之前的提交记录$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]# 切换到指定的标签$ git checkout &lt;标签名称&gt;# 查看标签的信息$ git show &lt;标签名称&gt;# 删除指定的标签$ git tag -d &lt;标签名称&gt;# 将指定的标签提交到远程仓库$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;# 将本地所有的标签全部提交到远程仓库$ git push &lt;远程仓库的别名&gt; –tags git mv重命名文件或者文件夹。 12# 重命名指定的文件或者文件夹$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt; git rm删除文件或者文件夹。 12345678# 移除跟踪指定的文件，并从本地仓库的文件夹中删除$ git rm &lt;文件路径&gt;# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除$ git rm -r &lt;文件夹路径&gt;# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件$ git rm --cached Git操作场景示例1. 删除掉本地不存在的远程分支多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch --all 依然会显示该远程分支，可使用下列的命令进行删除： 123456# 使用 pull 命令，添加 -p 参数$ git pull -p# 等同于下面的命令$ git fetch -p$ git fetch --prune origin 转至：https://www.jianshu.com/p/93318220cdce","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"命令","slug":"命令","permalink":"http://yoursite.com/tags/命令/"}]},{"title":"day01","slug":"day01","date":"2019-07-15T05:21:09.000Z","updated":"2019-07-15T06:30:40.510Z","comments":true,"path":"2019/07/15/day01/","link":"","permalink":"http://yoursite.com/2019/07/15/day01/","excerpt":"","text":"1.搭建购物车服务1.1.创建module1.2.pom依赖 12345678910111213141516171819202122232425262728293031323334&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;leyou&lt;/artifactId&gt; &lt;groupId&gt;com.leyou.parent&lt;/groupId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.leyou.service&lt;/groupId&gt; &lt;artifactId&gt;ly-cart&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 1.3.配置文件123456789101112131415server: port: 8088spring: application: name: cart-service redis: host: 192.168.56.101eureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka registry-fetch-interval-seconds: 10 instance: lease-renewal-interval-in-seconds: 5 lease-expiration-duration-in-seconds: 15 1.4.启动类123456789@SpringBootApplication@EnableDiscoveryClient@EnableFeignClientspublic class LeyouCartApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(LeyouCartApplication.class, args); &#125;&#125; 2.购物车功能分析2.1.需求需求描述： 用户可以在登录状态下将商品添加到购物车 放入数据库 mongodb 放入redis（采用） 用户可以在未登录状态下将商品添加到购物车 放入localstorage cookie webSQL 用户可以使用购物车一起结算下单 用户可以查询自己的购物车 用户可以在购物车中修改购买商品的数量。 用户可以在购物车中删除商品。 在购物车中展示商品优惠信息 提示购物车商品价格变化 2.2.流程图 这幅图主要描述了两个功能：新增商品到购物车、查询购物车。 新增商品： 判断是否登录 是：则添加商品到后台Redis中 否：则添加商品到本地的Localstorage 无论哪种新增，完成后都需要查询购物车列表： 判断是否登录 否：直接查询localstorage中数据并展示 是：已登录，则需要先看本地是否有数据， 有：需要提交到后台添加到redis，合并数据，而后查询 否：直接去后台查询redis，而后返回","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"},{"name":"购物车","slug":"购物车","permalink":"http://yoursite.com/tags/购物车/"}]},{"title":"我的文章","slug":"我的文章","date":"2019-07-15T04:34:57.000Z","updated":"2019-07-15T04:38:19.595Z","comments":true,"path":"2019/07/15/我的文章/","link":"","permalink":"http://yoursite.com/2019/07/15/我的文章/","excerpt":"","text":"##你好 这是我的第一篇文章","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-07-15T04:25:38.489Z","updated":"2019-07-15T04:25:38.489Z","comments":true,"path":"2019/07/15/hello-world/","link":"","permalink":"http://yoursite.com/2019/07/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}